version: '3.8'

services:
  # NewHTTPS API 服务 - 独立部署，包含证书申请功能
  newhttps-api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: newhttps-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./data/newhttps:/app/data
      - ./logs:/app/logs
      - ./api/.env:/app/.env:ro
      # 挂载 ACME 挑战目录，用于 HTTP-01 验证
      - ./data/acme-challenges:/app/data/acme-challenges
    environment:
      - NODE_ENV=production
      - STANDALONE_MODE=true
      - ENABLE_CERT_APPLY=true
    networks:
      - newhttps-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NewHTTPS Web 界面 - 独立的前端应用
  newhttps-web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: newhttps-web
    restart: unless-stopped
    environment:
      - VUE_APP_API_BASE_URL=/api
      - VUE_APP_MODE=standalone
    depends_on:
      - newhttps-api
    networks:
      - newhttps-network

  # Nginx 反向代理 - 处理 ACME 挑战和 SSL 终止
  nginx:
    image: nginx:alpine
    container_name: newhttps-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.standalone.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      # ACME 挑战文件目录
      - ./data/acme-challenges:/var/www/acme-challenges:ro
    depends_on:
      - newhttps-api
      - newhttps-web
    networks:
      - newhttps-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - 用于缓存和任务队列（可选）
  redis:
    image: redis:7-alpine
    container_name: newhttps-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - newhttps-network

  # 注意：定时任务功能已集成到 API 服务中
  # 如果需要独立的定时任务服务，可以取消注释以下配置：
  # newhttps-scheduler:
  #   image: node:18-alpine
  #   container_name: newhttps-scheduler
  #   restart: unless-stopped
  #   working_dir: /app
  #   command: ["node", "-e", "setInterval(() => console.log('Scheduler running...'), 60000)"]
  #   environment:
  #     - NODE_ENV=production
  #     - API_BASE_URL=http://newhttps-api:3000
  #   depends_on:
  #     - newhttps-api
  #   networks:
  #     - newhttps-network

networks:
  newhttps-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
