# NewHTTPS - 单机部署Docker Compose配置
# 适用于单机或小规模部署，简化配置，易于维护

version: '3.8'

services:
  # NewHTTPS API 服务
  newhttps-api:
    build:
      context: ./api
      dockerfile: Dockerfile.optimized
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VERSION=${VERSION:-1.0.0}
    image: newhttps-api:${VERSION:-latest}
    container_name: newhttps-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-3000}:3000"
    volumes:
      # 数据持久化
      - newhttps-data:/app/data
      - newhttps-logs:/app/logs
      - newhttps-uploads:/app/uploads
      - newhttps-ssl:/app/ssl
      - newhttps-backups:/app/backups
      # 配置文件（可选）
      - ./config:/app/config:ro
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - JWT_SECRET=${JWT_SECRET:-newhttps-default-secret-change-in-production}
      - API_PORT=3000
      - DB_PATH=/app/data/newhttps.db
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_PATH=/app/logs
      - SSL_CERT_PATH=/app/ssl
      - BACKUP_PATH=/app/backups
      - UPLOAD_PATH=/app/uploads
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-10485760}
    networks:
      - newhttps-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.newhttps.service=api"
      - "com.newhttps.version=${VERSION:-1.0.0}"
      - "com.newhttps.environment=${NODE_ENV:-production}"

  # NewHTTPS Web 界面
  newhttps-web:
    build:
      context: ./web
      dockerfile: Dockerfile.optimized
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - VERSION=${VERSION:-1.0.0}
    image: newhttps-web:${VERSION:-latest}
    container_name: newhttps-web
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8080}:80"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VITE_API_BASE_URL=http://localhost:${API_PORT:-3000}
    networks:
      - newhttps-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      newhttps-api:
        condition: service_healthy
    labels:
      - "com.newhttps.service=web"
      - "com.newhttps.version=${VERSION:-1.0.0}"
      - "com.newhttps.environment=${NODE_ENV:-production}"

  # Nginx 反向代理（可选）
  # 如果不需要反向代理，可以注释掉整个服务
  nginx-proxy:
    image: nginx:alpine
    container_name: newhttps-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.standalone.conf:/etc/nginx/nginx.conf:ro
      - newhttps-ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      newhttps-api:
        condition: service_healthy
      newhttps-web:
        condition: service_healthy
    networks:
      - newhttps-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "com.newhttps.service=proxy"
      - "com.newhttps.version=${VERSION:-1.0.0}"
    profiles:
      - with-proxy  # 仅在需要代理时启动

networks:
  newhttps-network:
    driver: bridge
    name: newhttps-network

volumes:
  newhttps-data:
    name: newhttps-data
    driver: local
  newhttps-logs:
    name: newhttps-logs
    driver: local
  newhttps-uploads:
    name: newhttps-uploads
    driver: local
  newhttps-ssl:
    name: newhttps-ssl
    driver: local
  newhttps-backups:
    name: newhttps-backups
    driver: local

# 使用说明:
# 1. 基础部署（API + Web）:
#    docker-compose -f docker-compose.standalone.yml up -d
#
# 2. 包含Nginx代理:
#    docker-compose -f docker-compose.standalone.yml --profile with-proxy up -d
#
# 3. 仅API服务:
#    docker-compose -f docker-compose.standalone.yml up -d newhttps-api
#
# 4. 查看服务状态:
#    docker-compose -f docker-compose.standalone.yml ps
#
# 5. 查看日志:
#    docker-compose -f docker-compose.standalone.yml logs -f
